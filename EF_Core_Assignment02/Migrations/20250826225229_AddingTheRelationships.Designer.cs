// <auto-generated />
using System;
using EF_Core_Assignment02.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Core_Assignment02.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250826225229_AddingTheRelationships")]
    partial class AddingTheRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Core_Assignment02.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Topic_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Topic_ID");

                    b.ToTable("Courses", t =>
                        {
                            t.HasCheckConstraint("CHK_Course_Duration", "[Duration] > 0");
                        });
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DepartmentManager_ID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("HiringDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Department Name");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentManager_ID")
                        .IsUnique()
                        .HasFilter("[DepartmentManager_ID] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments", t =>
                        {
                            t.HasCheckConstraint("CHK_Department_HiringDate", "[HiringDate] <= GETDATE()");
                        });
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Inst_Course", b =>
                {
                    b.Property<int>("Inst_ID")
                        .HasColumnType("int");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Evaluate")
                        .HasColumnType("int");

                    b.HasKey("Inst_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Inst_Courses", t =>
                        {
                            t.HasCheckConstraint("CHK_CourseInst_Evaluate", "[Evaluate] BETWEEN 1 AND 10");
                        });
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Dept_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("HourRateBouns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Instructor Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.HasIndex("Dept_ID");

                    b.ToTable("Instructors", t =>
                        {
                            t.HasCheckConstraint("CHK_Instructor_HourRateBouns", "[HourRateBouns] >= 0");

                            t.HasCheckConstraint("CHK_Instructor_Salary", "[Salary] > 0");
                        });
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Stud_Course", b =>
                {
                    b.Property<int>("Stud_ID")
                        .HasColumnType("int");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.HasKey("Stud_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Stud_Courses", t =>
                        {
                            t.HasCheckConstraint("CHK_StudCourse_Grade", "[Grade] BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Address");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Student Age");

                    b.Property<int>("Dept_ID")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("First Name");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Last Name");

                    b.HasKey("ID");

                    b.HasIndex("Dept_ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Course", b =>
                {
                    b.HasOne("EF_Core_Assignment02.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("Topic_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Department", b =>
                {
                    b.HasOne("EF_Core_Assignment02.Models.Instructor", "DepartmentManager")
                        .WithOne("ManagedDepartment")
                        .HasForeignKey("EF_Core_Assignment02.Models.Department", "DepartmentManager_ID");

                    b.Navigation("DepartmentManager");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Inst_Course", b =>
                {
                    b.HasOne("EF_Core_Assignment02.Models.Course", "Course")
                        .WithMany("Inst_Courses")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core_Assignment02.Models.Instructor", "Instructor")
                        .WithMany("Inst_Courses")
                        .HasForeignKey("Inst_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Instructor", b =>
                {
                    b.HasOne("EF_Core_Assignment02.Models.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("Dept_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Stud_Course", b =>
                {
                    b.HasOne("EF_Core_Assignment02.Models.Course", "Course")
                        .WithMany("Stud_Courses")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core_Assignment02.Models.Student", "Student")
                        .WithMany("Stud_Courses")
                        .HasForeignKey("Stud_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Student", b =>
                {
                    b.HasOne("EF_Core_Assignment02.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("Dept_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Course", b =>
                {
                    b.Navigation("Inst_Courses");

                    b.Navigation("Stud_Courses");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Instructor", b =>
                {
                    b.Navigation("Inst_Courses");

                    b.Navigation("ManagedDepartment");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Student", b =>
                {
                    b.Navigation("Stud_Courses");
                });

            modelBuilder.Entity("EF_Core_Assignment02.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
